// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	NonParamsRequest
	CreateKeyRequest
	CreateKeyResponse
	ListKeyResponse
*/
package rpcpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NonParamsRequest struct {
}

func (m *NonParamsRequest) Reset()                    { *m = NonParamsRequest{} }
func (m *NonParamsRequest) String() string            { return proto.CompactTextString(m) }
func (*NonParamsRequest) ProtoMessage()               {}
func (*NonParamsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateKeyRequest struct {
	Alias    string `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *CreateKeyRequest) Reset()                    { *m = CreateKeyRequest{} }
func (m *CreateKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateKeyRequest) ProtoMessage()               {}
func (*CreateKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateKeyRequest) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *CreateKeyRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateKeyResponse struct {
	Alias string `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Xpub  string `protobuf:"bytes,2,opt,name=xpub" json:"xpub,omitempty"`
}

func (m *CreateKeyResponse) Reset()                    { *m = CreateKeyResponse{} }
func (m *CreateKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateKeyResponse) ProtoMessage()               {}
func (*CreateKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateKeyResponse) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *CreateKeyResponse) GetXpub() string {
	if m != nil {
		return m.Xpub
	}
	return ""
}

type ListKeyResponse struct {
	Keys []*CreateKeyResponse `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *ListKeyResponse) Reset()                    { *m = ListKeyResponse{} }
func (m *ListKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*ListKeyResponse) ProtoMessage()               {}
func (*ListKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListKeyResponse) GetKeys() []*CreateKeyResponse {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterType((*NonParamsRequest)(nil), "rpcpb.NonParamsRequest")
	proto.RegisterType((*CreateKeyRequest)(nil), "rpcpb.CreateKeyRequest")
	proto.RegisterType((*CreateKeyResponse)(nil), "rpcpb.CreateKeyResponse")
	proto.RegisterType((*ListKeyResponse)(nil), "rpcpb.ListKeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	// Key
	CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error)
	ListKey(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*ListKeyResponse, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) CreateKey(ctx context.Context, in *CreateKeyRequest, opts ...grpc.CallOption) (*CreateKeyResponse, error) {
	out := new(CreateKeyResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/CreateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListKey(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*ListKeyResponse, error) {
	out := new(ListKeyResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/ListKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	// Key
	CreateKey(context.Context, *CreateKeyRequest) (*CreateKeyResponse, error)
	ListKey(context.Context, *NonParamsRequest) (*ListKeyResponse, error)
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateKey(ctx, req.(*CreateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/ListKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListKey(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _ApiService_CreateKey_Handler,
		},
		{
			MethodName: "ListKey",
			Handler:    _ApiService_ListKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xd1, 0x4a, 0xfb, 0x30,
	0x14, 0xc6, 0xe9, 0xfe, 0xdb, 0x5f, 0x7b, 0x44, 0x9d, 0x51, 0xb4, 0x16, 0x2f, 0x24, 0x57, 0x63,
	0x68, 0x8b, 0xf3, 0x6e, 0x20, 0x22, 0x7a, 0xa7, 0x88, 0x54, 0x6f, 0xbc, 0x4c, 0xeb, 0x61, 0x84,
	0xd5, 0x26, 0xe6, 0x64, 0xd3, 0xde, 0xfa, 0x0a, 0x3e, 0x8f, 0x4f, 0xe1, 0x2b, 0xf8, 0x20, 0xd2,
	0xac, 0x94, 0xb1, 0xb1, 0xbb, 0x9c, 0x7c, 0xdf, 0xf7, 0x4b, 0xbe, 0x04, 0x7c, 0xa3, 0xb3, 0x48,
	0x1b, 0x65, 0x15, 0xeb, 0x18, 0x9d, 0xe9, 0x34, 0x3c, 0x1a, 0x29, 0x35, 0xca, 0x31, 0x16, 0x5a,
	0xc6, 0xa2, 0x28, 0x94, 0x15, 0x56, 0xaa, 0x82, 0x66, 0x26, 0xce, 0xa0, 0x7b, 0xaf, 0x8a, 0x07,
	0x61, 0xc4, 0x2b, 0x25, 0xf8, 0x36, 0x41, 0xb2, 0xfc, 0x06, 0xba, 0xd7, 0x06, 0x85, 0xc5, 0x5b,
	0x2c, 0xeb, 0x3d, 0xb6, 0x07, 0x1d, 0x91, 0x4b, 0x41, 0x81, 0x77, 0xec, 0xf5, 0xfc, 0x64, 0x36,
	0xb0, 0x10, 0xd6, 0xb5, 0x20, 0x7a, 0x57, 0xe6, 0x25, 0x68, 0x39, 0xa1, 0x99, 0xf9, 0x05, 0xec,
	0xcc, 0x51, 0x48, 0xab, 0x82, 0x70, 0x05, 0x86, 0x41, 0xfb, 0x43, 0x4f, 0xd2, 0x1a, 0xe1, 0xd6,
	0xfc, 0x12, 0xb6, 0xef, 0x24, 0xd9, 0xf9, 0xf0, 0x09, 0xb4, 0xc7, 0x58, 0x56, 0xd9, 0x7f, 0xbd,
	0x8d, 0x41, 0x10, 0xb9, 0x7e, 0xd1, 0xd2, 0x21, 0x89, 0x73, 0x0d, 0xbe, 0x3d, 0x80, 0x2b, 0x2d,
	0x1f, 0xd1, 0x4c, 0x65, 0x86, 0xec, 0x19, 0xfc, 0xc6, 0xc9, 0x0e, 0x96, 0xb3, 0xae, 0x66, 0xb8,
	0x12, 0xca, 0x0f, 0x3f, 0x7f, 0x7e, 0xbf, 0x5a, 0xbb, 0x7c, 0x2b, 0x9e, 0x9e, 0xc5, 0x99, 0x93,
	0x4f, 0xc7, 0x58, 0x0e, 0xbd, 0x3e, 0x7b, 0x82, 0xb5, 0xfa, 0xaa, 0x0d, 0x78, 0xf1, 0x4d, 0xc3,
	0xfd, 0x5a, 0x58, 0xe8, 0xc4, 0x03, 0x87, 0x65, 0x7c, 0xb3, 0xc2, 0xe6, 0x92, 0x6c, 0x05, 0xa5,
	0xa1, 0xd7, 0x4f, 0xff, 0xbb, 0x0f, 0x3a, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xb0, 0x11,
	0x42, 0xd2, 0x01, 0x00, 0x00,
}
